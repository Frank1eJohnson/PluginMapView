// Copyright 1998-2016 Epic Games, Inc. All Rights Reserved.
/*===========================================================================
	Boilerplate C++ definitions for a single module.
	This is automatically generated by UnrealHeaderTool.
	DO NOT modify this manually! Edit the corresponding .h files instead!
===========================================================================*/

#include "PluginMapViewRuntime.h"
#include "GeneratedCppIncludes.h"
#include "PluginMapViewRuntime.generated.dep.h"
PRAGMA_DISABLE_DEPRECATION_WARNINGS
void EmptyLinkFunctionForGeneratedCode1PluginMapViewRuntime() {}
static class UEnum* EPluginMapViewRoadType_StaticEnum()
{
	extern PLUGINMAPVIEWRUNTIME_API class UPackage* Z_Construct_UPackage__Script_PluginMapViewRuntime();
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern PLUGINMAPVIEWRUNTIME_API class UEnum* Z_Construct_UEnum_PluginMapViewRuntime_EPluginMapViewRoadType();
		Singleton = GetStaticEnum(Z_Construct_UEnum_PluginMapViewRuntime_EPluginMapViewRoadType, Z_Construct_UPackage__Script_PluginMapViewRuntime(), TEXT("EPluginMapViewRoadType"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_EPluginMapViewRoadType(EPluginMapViewRoadType_StaticEnum, TEXT("/Script/PluginMapViewRuntime"), TEXT("EPluginMapViewRoadType"), false, nullptr, nullptr);
class UScriptStruct* FPluginMapViewBuilding::StaticStruct()
{
	extern PLUGINMAPVIEWRUNTIME_API class UPackage* Z_Construct_UPackage__Script_PluginMapViewRuntime();
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern PLUGINMAPVIEWRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FPluginMapViewBuilding();
		extern PLUGINMAPVIEWRUNTIME_API uint32 Get_Z_Construct_UScriptStruct_FPluginMapViewBuilding_CRC();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FPluginMapViewBuilding, Z_Construct_UPackage__Script_PluginMapViewRuntime(), TEXT("PluginMapViewBuilding"), sizeof(FPluginMapViewBuilding), Get_Z_Construct_UScriptStruct_FPluginMapViewBuilding_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FPluginMapViewBuilding(FPluginMapViewBuilding::StaticStruct, TEXT("/Script/PluginMapViewRuntime"), TEXT("PluginMapViewBuilding"), false, nullptr, nullptr);
static struct FScriptStruct_PluginMapViewRuntime_StaticRegisterNativesFPluginMapViewBuilding
{
	FScriptStruct_PluginMapViewRuntime_StaticRegisterNativesFPluginMapViewBuilding()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("PluginMapViewBuilding")),new UScriptStruct::TCppStructOps<FPluginMapViewBuilding>);
	}
} ScriptStruct_PluginMapViewRuntime_StaticRegisterNativesFPluginMapViewBuilding;
class UScriptStruct* FPluginMapViewNode::StaticStruct()
{
	extern PLUGINMAPVIEWRUNTIME_API class UPackage* Z_Construct_UPackage__Script_PluginMapViewRuntime();
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern PLUGINMAPVIEWRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FPluginMapViewNode();
		extern PLUGINMAPVIEWRUNTIME_API uint32 Get_Z_Construct_UScriptStruct_FPluginMapViewNode_CRC();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FPluginMapViewNode, Z_Construct_UPackage__Script_PluginMapViewRuntime(), TEXT("PluginMapViewNode"), sizeof(FPluginMapViewNode), Get_Z_Construct_UScriptStruct_FPluginMapViewNode_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FPluginMapViewNode(FPluginMapViewNode::StaticStruct, TEXT("/Script/PluginMapViewRuntime"), TEXT("PluginMapViewNode"), false, nullptr, nullptr);
static struct FScriptStruct_PluginMapViewRuntime_StaticRegisterNativesFPluginMapViewNode
{
	FScriptStruct_PluginMapViewRuntime_StaticRegisterNativesFPluginMapViewNode()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("PluginMapViewNode")),new UScriptStruct::TCppStructOps<FPluginMapViewNode>);
	}
} ScriptStruct_PluginMapViewRuntime_StaticRegisterNativesFPluginMapViewNode;
class UScriptStruct* FPluginMapViewRoadRef::StaticStruct()
{
	extern PLUGINMAPVIEWRUNTIME_API class UPackage* Z_Construct_UPackage__Script_PluginMapViewRuntime();
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern PLUGINMAPVIEWRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FPluginMapViewRoadRef();
		extern PLUGINMAPVIEWRUNTIME_API uint32 Get_Z_Construct_UScriptStruct_FPluginMapViewRoadRef_CRC();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FPluginMapViewRoadRef, Z_Construct_UPackage__Script_PluginMapViewRuntime(), TEXT("PluginMapViewRoadRef"), sizeof(FPluginMapViewRoadRef), Get_Z_Construct_UScriptStruct_FPluginMapViewRoadRef_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FPluginMapViewRoadRef(FPluginMapViewRoadRef::StaticStruct, TEXT("/Script/PluginMapViewRuntime"), TEXT("PluginMapViewRoadRef"), false, nullptr, nullptr);
static struct FScriptStruct_PluginMapViewRuntime_StaticRegisterNativesFPluginMapViewRoadRef
{
	FScriptStruct_PluginMapViewRuntime_StaticRegisterNativesFPluginMapViewRoadRef()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("PluginMapViewRoadRef")),new UScriptStruct::TCppStructOps<FPluginMapViewRoadRef>);
	}
} ScriptStruct_PluginMapViewRuntime_StaticRegisterNativesFPluginMapViewRoadRef;
class UScriptStruct* FPluginMapViewRoad::StaticStruct()
{
	extern PLUGINMAPVIEWRUNTIME_API class UPackage* Z_Construct_UPackage__Script_PluginMapViewRuntime();
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern PLUGINMAPVIEWRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FPluginMapViewRoad();
		extern PLUGINMAPVIEWRUNTIME_API uint32 Get_Z_Construct_UScriptStruct_FPluginMapViewRoad_CRC();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FPluginMapViewRoad, Z_Construct_UPackage__Script_PluginMapViewRuntime(), TEXT("PluginMapViewRoad"), sizeof(FPluginMapViewRoad), Get_Z_Construct_UScriptStruct_FPluginMapViewRoad_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FPluginMapViewRoad(FPluginMapViewRoad::StaticStruct, TEXT("/Script/PluginMapViewRuntime"), TEXT("PluginMapViewRoad"), false, nullptr, nullptr);
static struct FScriptStruct_PluginMapViewRuntime_StaticRegisterNativesFPluginMapViewRoad
{
	FScriptStruct_PluginMapViewRuntime_StaticRegisterNativesFPluginMapViewRoad()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("PluginMapViewRoad")),new UScriptStruct::TCppStructOps<FPluginMapViewRoad>);
	}
} ScriptStruct_PluginMapViewRuntime_StaticRegisterNativesFPluginMapViewRoad;
	void UPluginMapView::StaticRegisterNativesUPluginMapView()
	{
	}
	IMPLEMENT_CLASS(UPluginMapView, 2745818080);
	void UPluginMapViewComponent::StaticRegisterNativesUPluginMapViewComponent()
	{
		FNativeFunctionRegistrar::RegisterFunction(UPluginMapViewComponent::StaticClass(), "SetPluginMapView",(Native)&UPluginMapViewComponent::execSetPluginMapView);
	}
	IMPLEMENT_CLASS(UPluginMapViewComponent, 1528377928);
#if USE_COMPILED_IN_NATIVES
// Cross Module References
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FVector2D();
	COREUOBJECT_API class UClass* Z_Construct_UClass_UObject();
	ENGINE_API class UClass* Z_Construct_UClass_UAssetImportData_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UMeshComponent();

	PLUGINMAPVIEWRUNTIME_API class UEnum* Z_Construct_UEnum_PluginMapViewRuntime_EPluginMapViewRoadType();
	PLUGINMAPVIEWRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FPluginMapViewBuilding();
	PLUGINMAPVIEWRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FPluginMapViewNode();
	PLUGINMAPVIEWRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FPluginMapViewRoadRef();
	PLUGINMAPVIEWRUNTIME_API class UScriptStruct* Z_Construct_UScriptStruct_FPluginMapViewRoad();
	PLUGINMAPVIEWRUNTIME_API class UClass* Z_Construct_UClass_UPluginMapView_NoRegister();
	PLUGINMAPVIEWRUNTIME_API class UClass* Z_Construct_UClass_UPluginMapView();
	PLUGINMAPVIEWRUNTIME_API class UFunction* Z_Construct_UFunction_UPluginMapViewComponent_SetPluginMapView();
	PLUGINMAPVIEWRUNTIME_API class UClass* Z_Construct_UClass_UPluginMapViewComponent_NoRegister();
	PLUGINMAPVIEWRUNTIME_API class UClass* Z_Construct_UClass_UPluginMapViewComponent();
	PLUGINMAPVIEWRUNTIME_API class UPackage* Z_Construct_UPackage__Script_PluginMapViewRuntime();
	UEnum* Z_Construct_UEnum_PluginMapViewRuntime_EPluginMapViewRoadType()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_PluginMapViewRuntime();
		extern uint32 Get_Z_Construct_UEnum_PluginMapViewRuntime_EPluginMapViewRoadType_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EPluginMapViewRoadType"), 0, Get_Z_Construct_UEnum_PluginMapViewRuntime_EPluginMapViewRoadType_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EPluginMapViewRoadType"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("Street")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("MajorRoad")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("Highway")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("Other")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EPluginMapViewRoadType_MAX")), 4));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
			ReturnEnum->CppType = TEXT("EPluginMapViewRoadType");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnEnum, TEXT("Highway.ToolTip"), TEXT("Highway"));
			MetaData->SetValue(ReturnEnum, TEXT("MajorRoad.ToolTip"), TEXT("Major road or minor state highway"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/PluginMapView.h"));
			MetaData->SetValue(ReturnEnum, TEXT("Other.ToolTip"), TEXT("Other (path, bus route, etc)"));
			MetaData->SetValue(ReturnEnum, TEXT("Street.ToolTip"), TEXT("Small road or residential street"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Types of roads"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_PluginMapViewRuntime_EPluginMapViewRoadType_CRC() { return 2876094818U; }
	UScriptStruct* Z_Construct_UScriptStruct_FPluginMapViewBuilding()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_PluginMapViewRuntime();
		extern uint32 Get_Z_Construct_UScriptStruct_FPluginMapViewBuilding_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("PluginMapViewBuilding"), sizeof(FPluginMapViewBuilding), Get_Z_Construct_UScriptStruct_FPluginMapViewBuilding_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("PluginMapViewBuilding"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FPluginMapViewBuilding>, EStructFlags(0x00000201));
			UProperty* NewProp_BoundsMax = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("BoundsMax"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(BoundsMax, FPluginMapViewBuilding), 0x0010000000000001, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_BoundsMin = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("BoundsMin"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(BoundsMin, FPluginMapViewBuilding), 0x0010000000000001, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_Height = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Height"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Height, FPluginMapViewBuilding), 0x0010000000000001);
			UProperty* NewProp_BuildingPoints = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("BuildingPoints"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(BuildingPoints, FPluginMapViewBuilding), 0x0010000000000001);
			UProperty* NewProp_BuildingPoints_Inner = new(EC_InternalUseOnlyConstructor, NewProp_BuildingPoints, TEXT("BuildingPoints"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_BuildingName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("BuildingName"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(BuildingName, FPluginMapViewBuilding), 0x0010000000000001);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/PluginMapView.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("A building"));
			MetaData->SetValue(NewProp_BoundsMax, TEXT("Category"), TEXT("PluginMapView"));
			MetaData->SetValue(NewProp_BoundsMax, TEXT("ModuleRelativePath"), TEXT("Public/PluginMapView.h"));
			MetaData->SetValue(NewProp_BoundsMax, TEXT("ToolTip"), TEXT("2D bounds (max) of this building's points"));
			MetaData->SetValue(NewProp_BoundsMin, TEXT("Category"), TEXT("PluginMapView"));
			MetaData->SetValue(NewProp_BoundsMin, TEXT("ModuleRelativePath"), TEXT("Public/PluginMapView.h"));
			MetaData->SetValue(NewProp_BoundsMin, TEXT("ToolTip"), TEXT("2D bounds (min) of this building's points"));
			MetaData->SetValue(NewProp_Height, TEXT("Category"), TEXT("PluginMapView"));
			MetaData->SetValue(NewProp_Height, TEXT("ModuleRelativePath"), TEXT("Public/PluginMapView.h"));
			MetaData->SetValue(NewProp_Height, TEXT("ToolTip"), TEXT("Height of the building in meters (if known, otherwise zero)"));
			MetaData->SetValue(NewProp_BuildingPoints, TEXT("Category"), TEXT("PluginMapView"));
			MetaData->SetValue(NewProp_BuildingPoints, TEXT("ModuleRelativePath"), TEXT("Public/PluginMapView.h"));
			MetaData->SetValue(NewProp_BuildingPoints, TEXT("ToolTip"), TEXT("Polygon points that define the perimeter of the building"));
			MetaData->SetValue(NewProp_BuildingName, TEXT("Category"), TEXT("PluginMapView"));
			MetaData->SetValue(NewProp_BuildingName, TEXT("ModuleRelativePath"), TEXT("Public/PluginMapView.h"));
			MetaData->SetValue(NewProp_BuildingName, TEXT("ToolTip"), TEXT("Name of the building"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FPluginMapViewBuilding_CRC() { return 3950678802U; }
	UScriptStruct* Z_Construct_UScriptStruct_FPluginMapViewNode()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_PluginMapViewRuntime();
		extern uint32 Get_Z_Construct_UScriptStruct_FPluginMapViewNode_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("PluginMapViewNode"), sizeof(FPluginMapViewNode), Get_Z_Construct_UScriptStruct_FPluginMapViewNode_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("PluginMapViewNode"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FPluginMapViewNode>, EStructFlags(0x00000201));
			UProperty* NewProp_RoadRefs = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("RoadRefs"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(RoadRefs, FPluginMapViewNode), 0x0010000000000001);
			UProperty* NewProp_RoadRefs_Inner = new(EC_InternalUseOnlyConstructor, NewProp_RoadRefs, TEXT("RoadRefs"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FPluginMapViewRoadRef());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/PluginMapView.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Describes a node on a road.  Nodes usually connect at least two roads together, but they might also exist at the end of a dead-end street.  They are sort of like an \"intersection\"."));
			MetaData->SetValue(NewProp_RoadRefs, TEXT("Category"), TEXT("PluginMapView"));
			MetaData->SetValue(NewProp_RoadRefs, TEXT("ModuleRelativePath"), TEXT("Public/PluginMapView.h"));
			MetaData->SetValue(NewProp_RoadRefs, TEXT("ToolTip"), TEXT("All of the roads that intersect this node.  We have references to each of these roads, as well as the point along each\n          road where this node exists"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FPluginMapViewNode_CRC() { return 2815333065U; }
	UScriptStruct* Z_Construct_UScriptStruct_FPluginMapViewRoadRef()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_PluginMapViewRuntime();
		extern uint32 Get_Z_Construct_UScriptStruct_FPluginMapViewRoadRef_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("PluginMapViewRoadRef"), sizeof(FPluginMapViewRoadRef), Get_Z_Construct_UScriptStruct_FPluginMapViewRoadRef_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("PluginMapViewRoadRef"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FPluginMapViewRoadRef>, EStructFlags(0x00000201));
			UProperty* NewProp_RoadPointIndex = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("RoadPointIndex"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(RoadPointIndex, FPluginMapViewRoadRef), 0x0010000000000001);
			UProperty* NewProp_RoadIndex = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("RoadIndex"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(RoadIndex, FPluginMapViewRoadRef), 0x0010000000000001);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/PluginMapView.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Nodes have a list of road refs, one for each road that intersects this node.  Each road ref references a road and also the\n   point along that road where this node exists."));
			MetaData->SetValue(NewProp_RoadPointIndex, TEXT("Category"), TEXT("PluginMapView"));
			MetaData->SetValue(NewProp_RoadPointIndex, TEXT("ModuleRelativePath"), TEXT("Public/PluginMapView.h"));
			MetaData->SetValue(NewProp_RoadPointIndex, TEXT("ToolTip"), TEXT("Index of the point along road where this node exists"));
			MetaData->SetValue(NewProp_RoadIndex, TEXT("Category"), TEXT("PluginMapView"));
			MetaData->SetValue(NewProp_RoadIndex, TEXT("ModuleRelativePath"), TEXT("Public/PluginMapView.h"));
			MetaData->SetValue(NewProp_RoadIndex, TEXT("ToolTip"), TEXT("Index of road in the list of all roads in this street map"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FPluginMapViewRoadRef_CRC() { return 2934378901U; }
	UScriptStruct* Z_Construct_UScriptStruct_FPluginMapViewRoad()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_PluginMapViewRuntime();
		extern uint32 Get_Z_Construct_UScriptStruct_FPluginMapViewRoad_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("PluginMapViewRoad"), sizeof(FPluginMapViewRoad), Get_Z_Construct_UScriptStruct_FPluginMapViewRoad_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("PluginMapViewRoad"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FPluginMapViewRoad>, EStructFlags(0x00000201));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIsOneWay, FPluginMapViewRoad, uint8);
			UProperty* NewProp_bIsOneWay = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bIsOneWay"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIsOneWay, FPluginMapViewRoad), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(bIsOneWay, FPluginMapViewRoad), sizeof(uint8), false);
			UProperty* NewProp_BoundsMax = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("BoundsMax"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(BoundsMax, FPluginMapViewRoad), 0x0010000000000001, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_BoundsMin = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("BoundsMin"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(BoundsMin, FPluginMapViewRoad), 0x0010000000000001, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_RoadPoints = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("RoadPoints"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(RoadPoints, FPluginMapViewRoad), 0x0010000000000001);
			UProperty* NewProp_RoadPoints_Inner = new(EC_InternalUseOnlyConstructor, NewProp_RoadPoints, TEXT("RoadPoints"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_NodeIndices = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("NodeIndices"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(NodeIndices, FPluginMapViewRoad), 0x0010000000000001);
			UProperty* NewProp_NodeIndices_Inner = new(EC_InternalUseOnlyConstructor, NewProp_NodeIndices, TEXT("NodeIndices"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			UProperty* NewProp_RoadType = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("RoadType"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(RoadType, FPluginMapViewRoad), 0x0010000000000001, Z_Construct_UEnum_PluginMapViewRuntime_EPluginMapViewRoadType());
			UProperty* NewProp_RoadName = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("RoadName"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(RoadName, FPluginMapViewRoad), 0x0010000000000001);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/PluginMapView.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("A road"));
			MetaData->SetValue(NewProp_bIsOneWay, TEXT("Category"), TEXT("PluginMapView"));
			MetaData->SetValue(NewProp_bIsOneWay, TEXT("ModuleRelativePath"), TEXT("Public/PluginMapView.h"));
			MetaData->SetValue(NewProp_bIsOneWay, TEXT("ToolTip"), TEXT("True if this node is a one way.  One way nodes are only traversable in the order the nodes are listed in the above array."));
			MetaData->SetValue(NewProp_BoundsMax, TEXT("Category"), TEXT("PluginMapView"));
			MetaData->SetValue(NewProp_BoundsMax, TEXT("ModuleRelativePath"), TEXT("Public/PluginMapView.h"));
			MetaData->SetValue(NewProp_BoundsMax, TEXT("ToolTip"), TEXT("2D bounds (max) of this road's points"));
			MetaData->SetValue(NewProp_BoundsMin, TEXT("Category"), TEXT("PluginMapView"));
			MetaData->SetValue(NewProp_BoundsMin, TEXT("ModuleRelativePath"), TEXT("Public/PluginMapView.h"));
			MetaData->SetValue(NewProp_BoundsMin, TEXT("ToolTip"), TEXT("2D bounds (min) of this road's points"));
			MetaData->SetValue(NewProp_RoadPoints, TEXT("Category"), TEXT("PluginMapView"));
			MetaData->SetValue(NewProp_RoadPoints, TEXT("ModuleRelativePath"), TEXT("Public/PluginMapView.h"));
			MetaData->SetValue(NewProp_RoadPoints, TEXT("ToolTip"), TEXT("List of all of the points on this road, one for each node in the NodeIndices list"));
			MetaData->SetValue(NewProp_NodeIndices, TEXT("Category"), TEXT("PluginMapView"));
			MetaData->SetValue(NewProp_NodeIndices, TEXT("ModuleRelativePath"), TEXT("Public/PluginMapView.h"));
			MetaData->SetValue(NewProp_NodeIndices, TEXT("ToolTip"), TEXT("Nodes along this road, one at each point in the RoadPoints list"));
			MetaData->SetValue(NewProp_RoadType, TEXT("Category"), TEXT("PluginMapView"));
			MetaData->SetValue(NewProp_RoadType, TEXT("ModuleRelativePath"), TEXT("Public/PluginMapView.h"));
			MetaData->SetValue(NewProp_RoadType, TEXT("ToolTip"), TEXT("Type of road"));
			MetaData->SetValue(NewProp_RoadName, TEXT("Category"), TEXT("PluginMapView"));
			MetaData->SetValue(NewProp_RoadName, TEXT("ModuleRelativePath"), TEXT("Public/PluginMapView.h"));
			MetaData->SetValue(NewProp_RoadName, TEXT("ToolTip"), TEXT("Name of the road"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FPluginMapViewRoad_CRC() { return 1701863363U; }
	UClass* Z_Construct_UClass_UPluginMapView_NoRegister()
	{
		return UPluginMapView::StaticClass();
	}
	UClass* Z_Construct_UClass_UPluginMapView()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage__Script_PluginMapViewRuntime();
			OuterClass = UPluginMapView::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
#if WITH_EDITORONLY_DATA
				UProperty* NewProp_AssetImportData = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AssetImportData"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(AssetImportData, UPluginMapView), 0x00220808000a0009, Z_Construct_UClass_UAssetImportData_NoRegister());
#endif // WITH_EDITORONLY_DATA
				UProperty* NewProp_BoundsMax = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BoundsMax"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(BoundsMax, UPluginMapView), 0x0020080000020001, Z_Construct_UScriptStruct_FVector2D());
				UProperty* NewProp_BoundsMin = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BoundsMin"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(BoundsMin, UPluginMapView), 0x0020080000020001, Z_Construct_UScriptStruct_FVector2D());
				UProperty* NewProp_Buildings = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Buildings"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(Buildings, UPluginMapView), 0x0020080000020001);
				UProperty* NewProp_Buildings_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Buildings, TEXT("Buildings"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000020000, Z_Construct_UScriptStruct_FPluginMapViewBuilding());
				UProperty* NewProp_Nodes = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Nodes"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(Nodes, UPluginMapView), 0x0020080000020001);
				UProperty* NewProp_Nodes_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Nodes, TEXT("Nodes"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000020000, Z_Construct_UScriptStruct_FPluginMapViewNode());
				UProperty* NewProp_Roads = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Roads"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(Roads, UPluginMapView), 0x0020080000020001);
				UProperty* NewProp_Roads_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Roads, TEXT("Roads"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000020000, Z_Construct_UScriptStruct_FPluginMapViewRoad());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("PluginMapView.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/PluginMapView.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("A loaded street map"));
				MetaData->SetValue(NewProp_AssetImportData, TEXT("Category"), TEXT("ImportSettings"));
				MetaData->SetValue(NewProp_AssetImportData, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_AssetImportData, TEXT("ModuleRelativePath"), TEXT("Public/PluginMapView.h"));
				MetaData->SetValue(NewProp_AssetImportData, TEXT("ToolTip"), TEXT("Importing data and options used for this mesh"));
				MetaData->SetValue(NewProp_BoundsMax, TEXT("Category"), TEXT("PluginMapView"));
				MetaData->SetValue(NewProp_BoundsMax, TEXT("ModuleRelativePath"), TEXT("Public/PluginMapView.h"));
				MetaData->SetValue(NewProp_BoundsMax, TEXT("ToolTip"), TEXT("2D bounds (max) of this map's roads and buildings"));
				MetaData->SetValue(NewProp_BoundsMin, TEXT("Category"), TEXT("PluginMapView"));
				MetaData->SetValue(NewProp_BoundsMin, TEXT("ModuleRelativePath"), TEXT("Public/PluginMapView.h"));
				MetaData->SetValue(NewProp_BoundsMin, TEXT("ToolTip"), TEXT("2D bounds (min) of this map's roads and buildings"));
				MetaData->SetValue(NewProp_Buildings, TEXT("Category"), TEXT("PluginMapView"));
				MetaData->SetValue(NewProp_Buildings, TEXT("ModuleRelativePath"), TEXT("Public/PluginMapView.h"));
				MetaData->SetValue(NewProp_Buildings, TEXT("ToolTip"), TEXT("List of all buildings on the street map"));
				MetaData->SetValue(NewProp_Nodes, TEXT("Category"), TEXT("PluginMapView"));
				MetaData->SetValue(NewProp_Nodes, TEXT("ModuleRelativePath"), TEXT("Public/PluginMapView.h"));
				MetaData->SetValue(NewProp_Nodes, TEXT("ToolTip"), TEXT("List of nodes on this map.  Nodes describe interesting points along roads, usually where roads intersect or at the end of a dead-end street"));
				MetaData->SetValue(NewProp_Roads, TEXT("Category"), TEXT("PluginMapView"));
				MetaData->SetValue(NewProp_Roads, TEXT("ModuleRelativePath"), TEXT("Public/PluginMapView.h"));
				MetaData->SetValue(NewProp_Roads, TEXT("ToolTip"), TEXT("List of roads"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UPluginMapView(Z_Construct_UClass_UPluginMapView, &UPluginMapView::StaticClass, TEXT("UPluginMapView"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UPluginMapView);
	UFunction* Z_Construct_UFunction_UPluginMapViewComponent_SetPluginMapView()
	{
		struct PluginMapViewComponent_eventSetPluginMapView_Parms
		{
			UPluginMapView* NewPluginMapView;
		};
		UObject* Outer=Z_Construct_UClass_UPluginMapViewComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetPluginMapView"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(PluginMapViewComponent_eventSetPluginMapView_Parms));
			UProperty* NewProp_NewPluginMapView = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NewPluginMapView"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(NewPluginMapView, PluginMapViewComponent_eventSetPluginMapView_Parms), 0x0010000000000080, Z_Construct_UClass_UPluginMapView_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PluginMapView"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/PluginMapViewComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Assigns a street map asset to this component.  Render state will be updated immediately.\n\n@param NewPluginMapView The street map to use\n\n@return Sets the street map object"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UPluginMapViewComponent_NoRegister()
	{
		return UPluginMapViewComponent::StaticClass();
	}
	UClass* Z_Construct_UClass_UPluginMapViewComponent()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMeshComponent();
			Z_Construct_UPackage__Script_PluginMapViewRuntime();
			OuterClass = UPluginMapViewComponent::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20B00080;

				OuterClass->LinkChild(Z_Construct_UFunction_UPluginMapViewComponent_SetPluginMapView());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_PluginMapView = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PluginMapView"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(PluginMapView, UPluginMapViewComponent), 0x0020080000000001, Z_Construct_UClass_UPluginMapView_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UPluginMapViewComponent_SetPluginMapView(), "SetPluginMapView"); // 3390702461
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintSpawnableComponent"), TEXT(""));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Mobility Trigger"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("PluginMapViewComponent.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/PluginMapViewComponent.h"));
				MetaData->SetValue(OuterClass, TEXT("ObjectInitializerConstructorDeclared"), TEXT(""));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Component that represents a section of street map roads and buildings"));
				MetaData->SetValue(NewProp_PluginMapView, TEXT("Category"), TEXT("PluginMapViewComponent"));
				MetaData->SetValue(NewProp_PluginMapView, TEXT("ModuleRelativePath"), TEXT("Public/PluginMapViewComponent.h"));
				MetaData->SetValue(NewProp_PluginMapView, TEXT("ToolTip"), TEXT("The street map we're representing"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UPluginMapViewComponent(Z_Construct_UClass_UPluginMapViewComponent, &UPluginMapViewComponent::StaticClass, TEXT("UPluginMapViewComponent"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UPluginMapViewComponent);
	UPackage* Z_Construct_UPackage__Script_PluginMapViewRuntime()
	{
		static UPackage* ReturnPackage = NULL;
		if (!ReturnPackage)
		{
			ReturnPackage = CastChecked<UPackage>(StaticFindObjectFast(UPackage::StaticClass(), NULL, FName(TEXT("/Script/PluginMapViewRuntime")), false, false));
			ReturnPackage->SetPackageFlags(PKG_CompiledIn | 0x00000000);
			FGuid Guid;
			Guid.A = 0x4E3EA3F2;
			Guid.B = 0x086E0D38;
			Guid.C = 0x00000000;
			Guid.D = 0x00000000;
			ReturnPackage->SetGuid(Guid);

		}
		return ReturnPackage;
	}
#endif

PRAGMA_ENABLE_DEPRECATION_WARNINGS
